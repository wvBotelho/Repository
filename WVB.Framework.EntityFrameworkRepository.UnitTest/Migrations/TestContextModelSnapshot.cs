// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WVB.Framework.EntityFrameworkRepository.UnitTest.Data;

namespace WVB.Framework.EntityFrameworkRepository.UnitTest.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.Model.Auditoria", b =>
                {
                    b.Property<Guid>("AuditoriaID")
                        .HasColumnName("id_auditoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlteradoPor")
                        .HasColumnName("alterado_por")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CamposAlterados")
                        .HasColumnName("campos_alterados")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EntidadeID")
                        .HasColumnName("id_entidade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeEntidade")
                        .IsRequired()
                        .HasColumnName("nome_entidade")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UltimaAcao")
                        .IsRequired()
                        .HasColumnName("ultima_acao")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValoresAdicionados")
                        .HasColumnName("valores_adicionados")
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("AuditoriaID")
                        .HasName("pk_auditoria_id");

                    b.HasIndex("EntidadeID", "NomeEntidade")
                        .HasName("ix_entidade");

                    b.ToTable("auditoria_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .HasColumnName("customer_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProjectID")
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("deletado");

                    b.HasKey("CustomerID")
                        .HasName("pk_customer_id");

                    b.ToTable("customer_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectID")
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnName("customer_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<DateTime?>("End")
                        .HasColumnName("end")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Start")
                        .HasColumnName("start")
                        .HasColumnType("datetime");

                    b.Property<bool>("deletado");

                    b.HasKey("ProjectID")
                        .HasName("pk_project_id");

                    b.HasIndex("CustomerID");

                    b.ToTable("project_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ProjectDetail", b =>
                {
                    b.Property<Guid>("ProjectID")
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Budget")
                        .HasColumnName("budget")
                        .HasColumnType("money");

                    b.Property<bool>("Critical")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critical")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("ProjectID");

                    b.ToTable("project_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ProjectResource", b =>
                {
                    b.Property<Guid>("ProjectID")
                        .HasColumnName("project_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceID")
                        .HasColumnName("resource_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnName("role")
                        .HasColumnType("int");

                    b.HasKey("ProjectID", "ResourceID")
                        .HasName("pk_project_resource_id");

                    b.HasIndex("ResourceID");

                    b.ToTable("project_resource_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Resource", b =>
                {
                    b.Property<Guid>("ResourceID")
                        .HasColumnName("resource_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("TechnologyID")
                        .HasColumnName("technology_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("deletado");

                    b.HasKey("ResourceID")
                        .HasName("pk_resource_id");

                    b.HasIndex("TechnologyID");

                    b.ToTable("resource_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Technology", b =>
                {
                    b.Property<Guid>("TechnologyID")
                        .HasColumnName("technology_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ResourceID")
                        .HasColumnName("resource_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("deletado");

                    b.HasKey("TechnologyID")
                        .HasName("pk_technology_id");

                    b.HasIndex("ResourceID");

                    b.ToTable("technology_wvb_rep");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Customer", b =>
                {
                    b.OwnsOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ContactInformation", "Contact", b1 =>
                        {
                            b1.Property<Guid>("CustomerID");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnName("email")
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnName("phone")
                                .HasColumnType("varchar(14)");

                            b1.ToTable("customer_wvb_rep");

                            b1.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Customer")
                                .WithOne("Contact")
                                .HasForeignKey("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ContactInformation", "CustomerID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Project", b =>
                {
                    b.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ProjectDetail", b =>
                {
                    b.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Project", "Project")
                        .WithOne("Detail")
                        .HasForeignKey("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ProjectDetail", "ProjectID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ProjectResource", b =>
                {
                    b.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectID");

                    b.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Resource", "Resource")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ResourceID");
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Resource", b =>
                {
                    b.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Technology")
                        .WithMany("Resources")
                        .HasForeignKey("TechnologyID");

                    b.OwnsOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ContactInformation", "Contact", b1 =>
                        {
                            b1.Property<Guid>("ResourceID");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnName("email")
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnName("phone")
                                .HasColumnType("varchar(14)");

                            b1.ToTable("resource_wvb_rep");

                            b1.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Resource")
                                .WithOne("Contact")
                                .HasForeignKey("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.ContactInformation", "ResourceID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Technology", b =>
                {
                    b.HasOne("WVB.Framework.EntityFrameworkRepository.UnitTest.Models.Resource", "Resource")
                        .WithMany("Technologies")
                        .HasForeignKey("ResourceID");
                });
#pragma warning restore 612, 618
        }
    }
}
